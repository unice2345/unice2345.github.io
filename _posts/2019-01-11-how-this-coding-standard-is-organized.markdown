---
layout: post
title:  "该编程规范是如何组织的"
date:   2019-1-11 08:26:54 +0800
categories: jekyll update
---

(未完成，待补充)

### 标识

每个规则和建议都有一个唯一标识。
标识由三部分组成：
+ 表示标准章节的三个字母;
+ 00到99之间的两个数字；
+ 代码编程语言的后缀:
  + "-C"表示SEI CERT C语言编程标准
  + "-CPP"表示SEI CERT C++语言编程标准
  + "-J"表示SEI CERT JAVA语言编程标准
  + "-PL"表示SEI CERT Perl语言编程标准

三个字母用来表示相近种类的编程实践。
两个数字给每个编程实践一个唯一的编号。00到49表示建议，50到99表示规则。

下面是一些例子：
+ INT50-CPP Do not cast to an out-of-range enumeration value 
  + 这个标记代表一个规则；
  + INT表示整数种类的编程实践；
  + 50是一个唯一标识符；
  + -CPP表示C++编程语言

###  不遵从标准的代码示例和遵从标准的解决方案
不遵从标准的代码示例展示了破坏标准的代码。遵从标准的解决方案是将代码以安全和遵从标准的方式重写。

###  例外
每个规则和建议都会有一些例外，例外描述了在特定的条件下遵守这些指南并不能保证软件的安全性、可靠性和可防御性。
例外只是说明性的，并不强制要求遵守。

###  风险评估
每条准则后面都包含了一个风险评估章节，用来指示不遵从该准则有可能导致的后果, 有时也会阐述修改代价。 这些信息用来对修改代码进行优先级排序。

每个规则和建议都被指定一个*优先级*.

优先级的值由以下三个值确定: 严重性(Severity), 可能性(Likelihood), 修改代价(Remediation Cost)。 每个值的范围是1到3。

**严重性** -- 如果忽略了这条规则，结果会有多严重

|值|意义|攻击例子|
|--|--|--|
|1|低|拒绝服务攻击，异常结束|
|2|中|数据完整性被破坏，信息泄露|
|3|高|执行任意代码|

**可能性** -- 如果忽略了这条规则，有多大可能造成漏洞攻击

|值|意义|
|--|--|
|1|不太可能|
|2|有可能|
|3|非常可能|

**修改代码** -- 将代码修改为遵守规则所花费的代价

|值|意义|检测|修改|
|--|--|--|--|
|1|高|手动|手动|
|2|中|自动|手动|
|3|低|自动|自动|

优先级的值由上面三个值相乘得到。根据优先级的值，将规则和建议划分为三个等级，优先级取值为1到4，等级为3；优先级取值为6到9，等级为2；优先级取值为12到27，等级为1.

**优先级**和**等级**

|等级|优先级|解释|
|--|--|--|
|L1|12,18,27|高严重性，高可能性，修改代价大|
|L2|6,8,9|中等严重性，中等可能性，修改代价中等|
|L3|1,2,3,4|低严重性，低可能性，修改代价小|

（这里是图片，待补充）



# 参考链接

[SEI CERT C++ Coding Stardard][1]

[1]: https://wiki.sei.cmu.edu/confluence/display/cplusplus/How+this+Coding+Standard+Is+Organized

<a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br />本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">知识共享署名-相同方式共享 4.0 国际许可协议</a>进行许可。